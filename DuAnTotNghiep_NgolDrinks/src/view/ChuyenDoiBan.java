package view;

import Connect.DBConnection;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;
import java.util.List;

/**
 *
 * @author Duy Long
 */
public class ChuyenDoiBan extends javax.swing.JPanel {

    private JTable table;
    private DefaultTableModel model;
    private JTextField txtMaBan;
    private JButton btnChuyenDoi;
    private JButton btnReset; // thêm nút Reset

    /**
     * Creates new form ChuyenDoiBan
     */
    public ChuyenDoiBan() {
        setLayout(new BorderLayout());

        // Tiêu đề cột
        model = new DefaultTableModel(new Object[]{"Mã Bàn", "Tên Bàn", "Trạng Thái"}, 0);
        table = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table);

        // Panel phía dưới
        JPanel inputPanel = new JPanel();
        txtMaBan = new JTextField(10);
        btnChuyenDoi = new JButton("Chuyển đổi");
        btnReset = new JButton("Reset"); // tạo nút Reset

        inputPanel.add(new JLabel("Nhập Mã Bàn:"));
        inputPanel.add(txtMaBan);
        inputPanel.add(btnChuyenDoi);
        inputPanel.add(btnReset); // thêm vào giao diện

        add(scrollPane, BorderLayout.CENTER);
        add(inputPanel, BorderLayout.SOUTH);

        loadBanAn(); // Gọi hàm load dữ liệu

        // Sự kiện nhấn nút "Chuyển đổi"
        btnChuyenDoi.addActionListener(e -> chuyenTrangThai());

        // Sự kiện nhấn nút "Reset"
        btnReset.addActionListener(e -> resetTrangThai());
    }

    // Load dữ liệu từ database
    private void loadBanAn() {
        model.setRowCount(0); // Clear bảng
        try {
            String query = "SELECT MaBan, TenBan, TrangThai FROM BanAn";
            ResultSet rs = (ResultSet) DBConnection.executeQuery(query, new ArrayList<>());
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("MaBan"),
                    rs.getString("TenBan"),
                    rs.getString("TrangThai")
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Chuyển trạng thái của 1 bàn
    private void chuyenTrangThai() {
        String maBan = txtMaBan.getText().trim();
        if (maBan.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã bàn");
            return;
        }

        try {
            String queryCheck = "SELECT TrangThai FROM BanAn WHERE MaBan = ?";
            List<Object> paramsCheck = Arrays.asList(maBan);
            ResultSet rs = (ResultSet) DBConnection.executeQuery(queryCheck, paramsCheck);
            if (rs.next()) {
                String trangThaiHienTai = rs.getString("TrangThai");
                String trangThaiMoi = trangThaiHienTai.equalsIgnoreCase("trống") ? "có người" : "trống";

                String queryUpdate = "UPDATE BanAn SET TrangThai = ? WHERE MaBan = ?";
                List<Object> paramsUpdate = Arrays.asList(trangThaiMoi, maBan);
                boolean result = (boolean) DBConnection.executeQuery(queryUpdate, paramsUpdate);

                if (result) {
                    JOptionPane.showMessageDialog(this, "Chuyển trạng thái thành công!");
                    loadBanAn();
                } else {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy bàn hoặc lỗi khi cập nhật.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy mã bàn.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Reset tất cả bàn về trạng thái "Trống"
    private void resetTrangThai() {
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn đặt lại tất cả bàn về 'Trống'?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                String query = "UPDATE BanAn SET TrangThai = ?";
                List<Object> params = Arrays.asList("Trống");
                boolean result = (boolean) DBConnection.executeQuery(query, params);

                if (result) {
                    JOptionPane.showMessageDialog(this, "Đã reset trạng thái tất cả bàn về 'Trống'.");
                    loadBanAn();
                } else {
                    JOptionPane.showMessageDialog(this, "Reset thất bại.");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
